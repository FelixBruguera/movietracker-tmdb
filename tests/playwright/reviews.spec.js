import { test, expect } from "@playwright/test"

test.describe("as a logged in user", () => {
  test.beforeEach(async ({ page }) => {
    await page.goto("/users/login")
    const existingSession = await page
      .getByText("Already signed in")
      .isVisible()
    if (!existingSession) {
      await page.getByLabel("Username").fill("test")
      await page.getByLabel("Password").fill("123456789")
      await page.getByText("Send").click()
    }
  })
  test.describe("movie reviews", () => {
    test.describe.configure({ mode: "serial" })
    test.beforeEach(async ({ page }) => {
      await expect(page.getByRole("button", { name: "test" })).toBeVisible()
      await page.goto("/movies/5")
    })
    test("Creating a review", async ({ page }) => {
      await page.getByLabel("Add or manage your review").click()
      await page.getByRole("textbox").fill("Great movie")
      await page.getByRole("combobox", { name: "Your Rating" }).click()
      await page.getByLabel("9").click()
      await page.getByText("Save").click()
      await expect(page.getByText("Review created")).toBeVisible()
      await expect(page.getByText("Great Movie")).toHaveCount(2)
    })
    test("Editing a review", async ({ page }) => {
      await page.getByLabel("Add or manage your review").click()
      await page.getByLabel("Edit your review").click()
      await page.getByRole("textbox").fill("Not that great")
      await page.getByRole("combobox", { name: "Your Rating" }).click()
      await page.getByLabel("2").click()
      await page.getByText("Save").click()
      await expect(page.getByText("Review updated")).toBeVisible()
      await expect(page.getByText("Not that great")).toHaveCount(2)
    })
    test("Liking a review", async ({ page }) => {
      await page.getByLabel("Like").click()
      await expect(page.getByText("Like added")).toBeVisible()
      await expect(page.getByText("1 like")).toBeVisible()
    })
    test("Disliking a review", async ({ page }) => {
      await page.getByLabel("Dislike").click()
      await expect(page.getByText("Like removed")).toBeVisible()
      await expect(page.getByText("1 like")).not.toBeVisible()
    })
    test("Deleting a review", async ({ page }) => {
      await page.getByLabel("Add or manage your review").click()
      await page.getByLabel("Delete your review").click()
      await page.getByText("Delete").click()
      await expect(page.getByText("Review Deleted")).toBeVisible()
      await expect(page.getByText("Not that great")).toHaveCount(0)
    })
    test("Creating a review with a log", async ({ page }) => {
      await page.getByLabel("Add or manage your review").click()
      await page.getByRole("textbox").fill("Great movie")
      await page.getByRole("combobox", { name: "Your Rating" }).click()
      await page.getByLabel("9").click()
      await page.getByLabel("Add to diary").check()
      await page.getByText("Save").click()
      await expect(page.getByText("Review created")).toBeVisible()
      await expect(page.getByText("Great Movie")).toHaveCount(2)
      await page.getByRole("button", { name: "Close" }).click()
      await page.getByLabel("Manage your logs").click()
      await expect(page.getByRole("listitem")).toHaveCount(1)
      await expect(page.getByText("No logs")).not.toBeVisible()
    })
    test("Deleting log created with the review form", async ({ page }) => {
      await page.getByLabel("Manage your logs").click()
      await page.getByRole("button", { name: "Delete" }).click()
      await page.getByRole("button", { name: "Delete" }).click()
      await expect(page.getByText("Succesfully deleted")).toBeVisible()
      await page.getByRole("button", { name: "Close" }).click()
      await page.getByLabel("Add or manage your review").click()
      await page.getByLabel("Delete your review").click()
      await page.getByText("Delete", { exact: true }).click()
      await expect(page.getByText("Review Deleted")).toBeVisible()
      await expect(page.getByText("Not that great")).toHaveCount(0)
    })
  })
  test.describe("tv reviews", () => {
    test.describe.configure({ mode: "serial" })
    test.beforeEach(async ({ page }) => {
      await expect(page.getByRole("button", { name: "test" })).toBeVisible()
      await page.goto("/tv/5")
    })
    test("Creating a review", async ({ page }) => {
      await page.getByLabel("Add or manage your review").click()
      await page.getByRole("textbox").fill("Not bad")
      await page.getByRole("combobox", { name: "Your Rating" }).click()
      await page.getByLabel("5").click()
      await page.getByText("Save").click()
      await expect(page.getByText("Review created")).toBeVisible()
      await expect(page.getByText("Not bad")).toHaveCount(2)
    })
    test("Editing a review", async ({ page }) => {
      await page.getByLabel("Add or manage your review").click()
      await page.getByLabel("Edit your review").click()
      await page.getByRole("textbox").fill("Not that great")
      await page.getByRole("combobox", { name: "Your Rating" }).click()
      await page.getByLabel("2").click()
      await page.getByText("Save").click()
      await expect(page.getByText("Review updated")).toBeVisible()
      await expect(page.getByText("Not that great")).toHaveCount(2)
    })
    test("Deleting a liked review", async ({ page }) => {
      await page.getByLabel("Like").click()
      await page.getByLabel("Add or manage your review").click()
      await page.getByLabel("Delete your review").click()
      await page.getByText("Delete").click()
      await expect(page.getByText("Review Deleted")).toBeVisible()
      await expect(page.getByText("Not that great")).toHaveCount(0)
    })
    test("Creating a review with a log", async ({ page }) => {
      await page.getByLabel("Add or manage your review").click()
      await page.getByRole("textbox").fill("Great movie")
      await page.getByRole("combobox", { name: "Your Rating" }).click()
      await page.getByLabel("9").click()
      await page.getByLabel("Add to diary").check()
      await page.getByText("Save").click()
      await expect(page.getByText("Review created")).toBeVisible()
      await expect(page.getByText("Great Movie")).toHaveCount(2)
      await page.getByRole("button", { name: "Close" }).click()
      await page.getByLabel("Manage your logs").click()
      await expect(page.getByRole("listitem")).toHaveCount(1)
      await expect(page.getByText("No logs")).not.toBeVisible()
    })
    test("Deleting log created with the review form", async ({ page }) => {
      await page.getByLabel("Manage your logs").click()
      await page.getByRole("button", { name: "Delete" }).click()
      await page.getByRole("button", { name: "Delete" }).click()
      await expect(page.getByText("Succesfully deleted")).toBeVisible()
      await page.getByRole("button", { name: "Close" }).click()
      await page.getByLabel("Add or manage your review").click()
      await page.getByLabel("Delete your review").click()
      await page.getByText("Delete", { exact: true }).click()
      await expect(page.getByText("Review Deleted")).toBeVisible()
      await expect(page.getByText("Not that great")).toHaveCount(0)
    })
  })
  test.describe("reviewing a movie from a watchlist removes it from the list", () => {
    test.describe.configure({ mode: "serial" })
    test("adding the movie to the list", async ({ page }) => {
      await page.goto("/movies/566810")
      await page.getByLabel("Add or remove from lists").click()
      await page.getByRole("button", { name: "Add to list" }).click()
      await expect(page.getByText("Succesfully Added")).toBeVisible()
      await page.goto("/lists/c6037ab1-4c29-4cf2-939e-1a8151743f6b")
      await expect(page.getByAltText("The Dark Kingdom")).toBeVisible()
    })
    test("reviewing the movie", async ({ page }) => {
      await page.goto("/movies/566810")
      await page.getByLabel("Add or manage your review").click()
      await page.getByRole("textbox").fill("I watched this.")
      await page.getByRole("combobox", { name: "Your Rating" }).click()
      await page.getByLabel("6").click()
      await page.getByText("Save", { exact: true }).click()
      await expect(page.getByText("Review created")).toBeVisible()
    })
    test("checking the list after reviewing", async ({ page }) => {
      await page.goto("/lists/c6037ab1-4c29-4cf2-939e-1a8151743f6b")
      await expect(page.getByAltText("The Dark Kingdom")).not.toBeVisible()
    })

    test("deleting the review", async ({ page }) => {
      await page.goto("/movies/566810")
      await page.getByLabel("Add or manage your review").click()
      await page.getByLabel("Delete your review").click()
      await page.getByText("Delete").click()
      await expect(page.getByText("Review Deleted")).toBeVisible()
    })
  })
  test.describe("reviewing a tv show from a watchlist removes it from the list", () => {
    test.describe.configure({ mode: "serial" })
    test("adding the show to the list", async ({ page }) => {
      await page.goto("/tv/157239")
      await page.getByLabel("Add or remove from lists").click()
      await page.getByRole("button", { name: "Add to list" }).click()
      await expect(page.getByText("Succesfully Added")).toBeVisible()
      await page.goto("/lists/c6037ab1-4c29-4cf2-939e-1a8151743f6b")
      await expect(page.getByAltText("Alien: Earth")).toBeVisible()
    })
    test("reviewing the show", async ({ page }) => {
      await page.goto("/tv/157239")
      await page.getByLabel("Add or manage your review").click()
      await page.getByRole("textbox").fill("I watched this.")
      await page.getByRole("combobox", { name: "Your Rating" }).click()
      await page.getByLabel("6").click()
      await page.getByText("Save", { exact: true }).click()
      await expect(page.getByText("Review created")).toBeVisible()
    })
    test("checking the list after reviewing", async ({ page }) => {
      await page.goto("/lists/c6037ab1-4c29-4cf2-939e-1a8151743f6b")
      await expect(page.getByAltText("Alien: Earth")).not.toBeVisible()
    })

    test("deleting the review", async ({ page }) => {
      await page.goto("/tv/157239")
      await page.getByLabel("Add or manage your review").click()
      await page.getByLabel("Delete your review").click()
      await page.getByText("Delete").click()
      await expect(page.getByText("Review Deleted")).toBeVisible()
    })
  })
})

test.describe("sorting reviews", () => {
  test.beforeEach(async ({ page }) => {
    await page.goto("/movies/755898")
  })
  test("sorting by rating", async ({ page }) => {
    await page.getByLabel("Sort Reviews").click()
    await page.getByRole("option", { name: "Rating" }).click()
    const firstReview = page.getByLabel("Reviews").getByRole("listitem").nth(0)
    await expect(firstReview).toContainText("gandalf")
    await expect(firstReview).toContainText("10")
  })
  test("sorting by likes", async ({ page }) => {
    await page.getByLabel("Sort Reviews").click()
    await page.getByRole("option", { name: "Likes" }).click()
    const firstReview = page.getByLabel("Reviews").getByRole("listitem").nth(0)
    const secondReview = page.getByLabel("Reviews").getByRole("listitem").nth(1)
    const thirdReview = page.getByLabel("Reviews").getByRole("listitem").nth(2)
    await expect(firstReview).toContainText("test")
    await expect(secondReview).toContainText("samwise")
    await expect(thirdReview).toContainText("arwen")
  })
  test("sorting by date", async ({ page }) => {
    await page.getByLabel("Sort Reviews").click()
    await page.getByRole("option", { name: "Date" }).click()
    await page.getByLabel("Descending order").click()
    const firstReview = page.getByLabel("Reviews").getByRole("listitem").nth(0)
    const secondReview = page.getByLabel("Reviews").getByRole("listitem").nth(1)
    await expect(firstReview).toContainText("samwise")
    await expect(firstReview).toContainText("30-05-2008")
    await expect(secondReview).toContainText("saruman")
    await expect(secondReview).toContainText("01-05-2019")
  })
})

test.describe("pagination", () => {
  test.beforeEach(async ({ page }) => {
    await page.goto("/movies/755898")
  })
  test("going to the next page", async ({ page }) => {
    await expect(page.getByLabel("Go to previous page")).toBeDisabled()
    await page.getByLabel("Go to next page").click()
    const lastReview = page.getByLabel("Reviews").getByRole("listitem").nth(2)
    await expect(lastReview).toContainText("samwise")
    await expect(lastReview).toContainText("30-05-2008")
    await expect(page.getByLabel("Go to next page")).toBeDisabled()
  })
})
